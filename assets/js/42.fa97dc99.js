(window.webpackJsonp=window.webpackJsonp||[]).push([[42],{421:function(n,s,a){"use strict";a.r(s);var e=a(41),t=Object(e.a)({},(function(){var n=this,s=n.$createElement,a=n._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[a("h1",{attrs:{id:"并查集"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#并查集"}},[n._v("#")]),n._v(" 并查集")]),n._v(" "),a("h2",{attrs:{id:"_886-可能的二分法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_886-可能的二分法"}},[n._v("#")]),n._v(" 886. 可能的二分法")]),n._v(" "),a("p",[a("code",[n._v("中等")]),n._v(" 给定一组 n 人（编号为 1, 2, ..., n）， 我们想把每个人分进任意大小的两组。每个人都可能不喜欢其他人，那么他们不应该属于同一组。\n给定整数 n 和数组 dislikes ，其中 dislikes[i] = [ai, bi] ，表示不允许将编号为 ai 和  bi 的人归入同一组。当可以用这种方法将所有人分进两组时，返回 true；否则返回 false。\n"),a("a",{attrs:{href:"https://leetcode.cn/problems/possible-bipartition/",target:"_blank",rel:"noopener noreferrer"}},[n._v("详细"),a("OutboundLink")],1)]),n._v(" "),a("div",{staticClass:"language-golang line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("type unionFind struct {\n    parent, rank[]int\n}\n\nfunc newUnionFind(n int) unionFind {\n    parent := make([]int, n)\n    for i := range parent {\n        parent[i] = i\n    }\n    return unionFind{parent, make([]int, n)}\n}\n\nfunc (uf unionFind) find(x int) int {\n    if uf.parent[x] != x {\n        uf.parent[x] = uf.find(uf.parent[x])\n    }\n    return uf.parent[x]\n}\n\nfunc (uf unionFind) union(x, y int) {\n    x, y := uf.find(x), uf.find(y) \n    if x == y {\n        return\n    }\n    if uf.rank[x] > uf.rank[y] {\n        uf.parent[y] = x\n    } else if uf.rank[x] < uf.rank[y] {\n        uf.parent[x] = y\n    } else {\n        uf.parent[y] = x\n        uf.rank[x]++\n    }\n}\n\nfunc (uf unionFind) isConnected(x, y int) bool {\n    return uf.find(x) == uf.find(y)\n}\n\nfunc possibleBipartition(n int, dislike [][]int) bool {\n    g := make([][]int, n)\n    for _, d := range dislikes {\n        x, y := d[0] - 1, d[1] - 1\n        g[x] = append(g[x], y)\n        g[y] = append(g[y], x)\n    }\n    uf := newUnionFind(n)\n    for x, nodes := range g {\n        for _, y := range nodes {\n            uf.union(nodes[0], y)\n            if uf.isConnected(x, y) {\n                return false\n            }\n        }\n    }\n    return true\n}\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br"),a("span",{staticClass:"line-number"},[n._v("18")]),a("br"),a("span",{staticClass:"line-number"},[n._v("19")]),a("br"),a("span",{staticClass:"line-number"},[n._v("20")]),a("br"),a("span",{staticClass:"line-number"},[n._v("21")]),a("br"),a("span",{staticClass:"line-number"},[n._v("22")]),a("br"),a("span",{staticClass:"line-number"},[n._v("23")]),a("br"),a("span",{staticClass:"line-number"},[n._v("24")]),a("br"),a("span",{staticClass:"line-number"},[n._v("25")]),a("br"),a("span",{staticClass:"line-number"},[n._v("26")]),a("br"),a("span",{staticClass:"line-number"},[n._v("27")]),a("br"),a("span",{staticClass:"line-number"},[n._v("28")]),a("br"),a("span",{staticClass:"line-number"},[n._v("29")]),a("br"),a("span",{staticClass:"line-number"},[n._v("30")]),a("br"),a("span",{staticClass:"line-number"},[n._v("31")]),a("br"),a("span",{staticClass:"line-number"},[n._v("32")]),a("br"),a("span",{staticClass:"line-number"},[n._v("33")]),a("br"),a("span",{staticClass:"line-number"},[n._v("34")]),a("br"),a("span",{staticClass:"line-number"},[n._v("35")]),a("br"),a("span",{staticClass:"line-number"},[n._v("36")]),a("br"),a("span",{staticClass:"line-number"},[n._v("37")]),a("br"),a("span",{staticClass:"line-number"},[n._v("38")]),a("br"),a("span",{staticClass:"line-number"},[n._v("39")]),a("br"),a("span",{staticClass:"line-number"},[n._v("40")]),a("br"),a("span",{staticClass:"line-number"},[n._v("41")]),a("br"),a("span",{staticClass:"line-number"},[n._v("42")]),a("br"),a("span",{staticClass:"line-number"},[n._v("43")]),a("br"),a("span",{staticClass:"line-number"},[n._v("44")]),a("br"),a("span",{staticClass:"line-number"},[n._v("45")]),a("br"),a("span",{staticClass:"line-number"},[n._v("46")]),a("br"),a("span",{staticClass:"line-number"},[n._v("47")]),a("br"),a("span",{staticClass:"line-number"},[n._v("48")]),a("br"),a("span",{staticClass:"line-number"},[n._v("49")]),a("br"),a("span",{staticClass:"line-number"},[n._v("50")]),a("br"),a("span",{staticClass:"line-number"},[n._v("51")]),a("br"),a("span",{staticClass:"line-number"},[n._v("52")]),a("br"),a("span",{staticClass:"line-number"},[n._v("53")]),a("br"),a("span",{staticClass:"line-number"},[n._v("54")]),a("br"),a("span",{staticClass:"line-number"},[n._v("55")]),a("br"),a("span",{staticClass:"line-number"},[n._v("56")]),a("br")])])])}),[],!1,null,null,null);s.default=t.exports}}]);