(window.webpackJsonp=window.webpackJsonp||[]).push([[47],{427:function(t,a,s){"use strict";s.r(a);var e=s(41),r=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"react"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#react"}},[t._v("#")]),t._v(" React")]),t._v(" "),s("h2",{attrs:{id:"shallowequal的流程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#shallowequal的流程"}},[t._v("#")]),t._v(" shallowEqual的流程")]),t._v(" "),s("ul",[s("li",[t._v("第一步，直接通过 === 判断是否相等，如果相等，那么返回true。正常情况只要调用 React.createElement 会重新创建props，props都是不相等的。")]),t._v(" "),s("li",[t._v("第二步，如果新老props有一个不为对象，或者不存在，那么直接返回false。")]),t._v(" "),s("li",[t._v("第三步，判断新老props，key组成的数组数量等不想等，说明props有增加或者减少，那么直接返回false。")]),t._v(" "),s("li",[t._v("第四步，遍历老的props ,发现新的props没有与之对应，或者新老props不同等,那么返回false。")]),t._v(" "),s("li",[t._v("默认返回true。")])]),t._v(" "),s("h2",{attrs:{id:"hook的动机"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#hook的动机"}},[t._v("#")]),t._v(" Hook的动机")]),t._v(" "),s("ol",[s("li",[t._v("Hook使你在无需修改组件结构的情况下复用状态逻辑。")]),t._v(" "),s("li",[t._v("Hook将组件中相互关联的部分拆分成更小的函数。")]),t._v(" "),s("li",[t._v("Hook使你在非class的情况下可以使用更多的React特性。")])])])}),[],!1,null,null,null);a.default=r.exports}}]);