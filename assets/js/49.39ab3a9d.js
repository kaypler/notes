(window.webpackJsonp=window.webpackJsonp||[]).push([[49],{429:function(a,t,v){"use strict";v.r(t);var _=v(41),r=Object(_.a)({},(function(){var a=this,t=a.$createElement,v=a._self._c||t;return v("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[v("h1",{attrs:{id:"算法的乐趣"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#算法的乐趣"}},[a._v("#")]),a._v(" 算法的乐趣")]),a._v(" "),v("h2",{attrs:{id:"p31"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#p31"}},[a._v("#")]),a._v(" P31")]),a._v(" "),v("p",[a._v("固定长度缓冲区的读写，环形队列通常是最好的选择。当 tail + 1 等于 head 的时候，说明队列已满，此时只需将 head 指针向前移动一位，就可以在 tail 位置写入新的记录。")]),a._v(" "),v("h2",{attrs:{id:"p36"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#p36"}},[a._v("#")]),a._v(" P36")]),a._v(" "),v("p",[a._v("程序员就是计算机的“上帝”，计算机能解决问题是因为它的“上帝”告诉它怎么做。")]),a._v(" "),v("h2",{attrs:{id:"p69"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#p69"}},[a._v("#")]),a._v(" P69")]),a._v(" "),v("p",[a._v("贪婪法（greedy algorithm），又称贪心算法，是寻找最优解问题的常用方法。这种方法模式一般将求解过程分成若干个步骤，在每个步骤都应用贪心原则，选取当前状态下最好的或最优的选择（局部最有利的选择），并以此希望最后堆叠出的结果也是最好或最优的解。")]),a._v(" "),v("p",[a._v("贪婪法和动态规划法以及分治法一样，都需要对问题进行分解，定义最优解的子结构。但是，贪婪法与其他方法最大的不同在于，贪婪法每一步选择完之后，局部最优解就确定了，不再进行回溯处理，也就是说，每一个步骤的局部最优解确定以后，就不再修改，直到算法结束。因为不进行回溯处理，贪婪法只在很少的情况下可以得到真正的最优解，比如最短路径问题、图的最小生成树问题。大多数情况下，由于选择策略的“短视”，贪婪法会错过真正的最优解，得不到问题的真正答案。但是贪婪法简单高效，省去了为找最优解可能需要的穷举操作，可以得到与最优解比较接近的近似最优解，通常作为其他算法的辅助算法使用。")]),a._v(" "),v("p",[a._v("贪婪法的基本设计思想有以下三个步骤。")]),a._v(" "),v("ol",[v("li",[a._v("建立对问题精确描述的数学模型，包括定义最优解的模型；")]),a._v(" "),v("li",[a._v("将问题分解为一系列子问题，同时定义子问题的最优解结构；")]),a._v(" "),v("li",[a._v("应用贪心原则确定每个子问题的局部最优解，并根据最优解的模型，用子问题的局部最优解堆叠出全局最优解。")])]),a._v(" "),v("h2",{attrs:{id:"p74"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#p74"}},[a._v("#")]),a._v(" P74")]),a._v(" "),v("p",[a._v("分治法（divide and conquer）也是一种解决问题的常用模式，分治法的设计思想是将无法着手解决的大问题分解成一系列规模较小的相同问题，然后逐个解决小问题，即所谓的分而治之。分治法产生的子问题与原始问题相同，只是规模减小，反复使用分治方法，可以使得子问题的规模不断减小，直到能够被直接求解为止。")]),a._v(" "),v("p",[a._v("分治法的基本思想")]),a._v(" "),v("ol",[v("li",[a._v("分解：将问题分解为若干个规模较小，相互独立且与原问题形式相同的子问题，确保各个子问题的解具有相同的子结构。")]),a._v(" "),v("li",[a._v("解决：如果上一步分解得到的子问题可以解决，则解决这些子问题，否则，对每个子问题使用和上一步相同的方法再次分解，然后求解分解后的子问题，这个过程可能是一个递归的过程。")]),a._v(" "),v("li",[a._v("合并：将上一步解决的各个子问题的解通过某种规则合并起来，得到原问题的解。")])]),a._v(" "),v("h2",{attrs:{id:"p79"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#p79"}},[a._v("#")]),a._v(" P79")]),a._v(" "),v("p",[a._v("动态规划（dynamic programming）是解决多阶段决策问题常用的最优化理论，该理论由美国数学家Bellman等人在1957年提出，用于研究多阶段决策过程的优化问题。该理论提出后，立即在数学、计算机科学、经济管理和工程技术领域得到了广泛的应用，例如最短路线、库存管理、资源分配、设备更新、排序、装载等问题，用动态规划方法往往比朴素的方法更高效。动态规划方法的原理就是把多阶段决策过程转化为一系列的单阶段决策问题，利用各个阶段之间的递推关系，逐个确定每个阶段的最优化决策，最终堆叠出多阶段决策的最优化决策结果。")]),a._v(" "),v("p",[a._v("动态规划适合求解多阶段（状态转换）决策问题的最优解，也可用于含有线性或非线性递推关系的最优解问题，但是这些问题都必须满足最优化原理和子问题的“无后向性”。")]),a._v(" "),v("ul",[v("li",[a._v("最优化原理：最优化原理其实就是问题的最优子结构的性质，如果一个问题的最优子结构是不论过去状态和决策如何，对前面的决策所形成的状态而言，其后的决策必须构成最优策略。也就是说，不管之前决策是否是最优决策，都必须保证从现在开始的决策是在之前决策基础上的最优决策，则这样的最优子结构就符合最优化原理。")]),a._v(" "),v("li",[a._v("无后向性（无后效性）：所谓“无后向性”，就是当各个阶段的子问题确定以后，对于某个特定阶段的子问题来说，它之前的各个阶段的子问题的决策只影响该阶段的决策，对该阶段之后的决策不产生影响，也就是说，每个阶段的决策仅受之前决策的影响，但是不影响之后各阶段的决策。")])]),a._v(" "),v("p",[a._v("动态规划的基本思想\n和分治法一样，动态规划解决复杂问题的思路也是对问题进行分解，通过求解小规模的子问题再反推出原问题的结果。但是动态规划分解子问题不是简单地按照“大事化小”的方式进行的，而是沿着决策的阶段划分子问题，决策的阶段可以随时间划分，也可以随着问题的演化状态划分。分治法要求子问题是互相独立的，以便分别求解并最终合并出原始问题的解，但是动态规划法的子问题不是互相独立的，子问题之间通常有包含关系。")]),a._v(" "),v("p",[a._v("动态规划法不像贪婪法或分治法那样有固定的算法实现模式，作为解决多阶段决策最优化问题的一种思想，它没有具体的实现模式，可以用带备忘录的递归方法实现，也可以根据堆叠子问题之间的递推公式用递推的方法实现。但是从算法设计的角度分析，使用动态规划法一般需要四个步骤，分别是定义最优子问题、定义状态、定义决策和状态转换方程以及确定边界条件，这四个问题解决了，算法也就确定了。")])])}),[],!1,null,null,null);t.default=r.exports}}]);