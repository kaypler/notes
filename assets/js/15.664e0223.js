(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{372:function(t,e,r){t.exports=r.p+"assets/img/async-defer.6dae3337.png"},429:function(t,e,r){"use strict";r.r(e);var s=r(41),_=Object(s.a)({},(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"浏览器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#浏览器"}},[t._v("#")]),t._v(" 浏览器")]),t._v(" "),s("h2",{attrs:{id:"dom"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#dom"}},[t._v("#")]),t._v(" DOM")]),t._v(" "),s("p",[t._v("文档对象模型（Document Object Model，"),s("strong",[t._v("DOM")]),t._v("）是表示和操作HTML和XML文档内容的基础API。\n当网页被加载时，浏览器会根据DOM模型，将结构化文档（比如HTML和XML）解析成一系列的节点，再由这些节点组成一个树状结构（DOM Tree）。")]),t._v(" "),s("p",[t._v("节点有7种类型：")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("Document")]),t._v("：整个文档树的顶层节点，nodeType = 9")]),t._v(" "),s("li",[s("strong",[t._v("DocumentType")]),t._v("：doctype标签（比如<!DOCTYPE html>）")]),t._v(" "),s("li",[s("strong",[t._v("Element")]),t._v("：网页的各种HTML标签（比如<body>、<a>等），nodeType = 1")]),t._v(" "),s("li",[s("strong",[t._v("Attribute")]),t._v('：网页元素的属性（比如class="right"）')]),t._v(" "),s("li",[s("strong",[t._v("Text")]),t._v("：标签之间或标签包含的文本，nodeType = 3")]),t._v(" "),s("li",[s("strong",[t._v("Comment")]),t._v("：HTML或XML的注释，nodeType = 8")]),t._v(" "),s("li",[s("strong",[t._v("DocumentFragment")]),t._v("：文档的片段，nodeType = 11")])]),t._v(" "),s("h2",{attrs:{id:"shadow-dom"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#shadow-dom"}},[t._v("#")]),t._v(" Shadow DOM")]),t._v(" "),s("p",[t._v("可以将Shadow DOM视为“DOM中的DOM”。它是自己独立的DOM树，具有自己的元素和样式，与原始DOM完全隔离。")]),t._v(" "),s("h2",{attrs:{id:"async-与-defer"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#async-与-defer"}},[t._v("#")]),t._v(" async 与 defer")]),t._v(" "),s("p",[t._v("当浏览器碰到 script 脚本的时候：")]),t._v(" "),s("ol",[s("li",[s("p",[s("code",[t._v('<script src="script.js"><\/script>')]),t._v(" "),s("br"),t._v("\n没有 defer 或 async，浏览器会立即加载并执行指定的脚本，“立即”指的是在渲染该 script 标签之下的文档元素之前，也就是说不等待后续载入的文档元素，读到就加载并执行。")])]),t._v(" "),s("li",[s("p",[s("code",[t._v('<script async src="script.js"><\/script>')]),t._v(" "),s("br"),t._v("\n有 async，加载和渲染后续文档元素的过程将和 script.js 的加载与执行并行进行（异步）。")])]),t._v(" "),s("li",[s("p",[s("code",[t._v('<script defer src="myscript.js"><\/script>')]),t._v(" "),s("br"),t._v("\n有 defer，加载后续文档元素的过程将和 script.js 的加载并行进行（异步），但是 script.js 的执行要在所有元素解析完成之后，DOMContentLoaded 事件触发之前完成。")])])]),t._v(" "),s("p",[t._v("从实用角度来说呢，首先把所有脚本都丢到 "),s("code",[t._v("</body>")]),t._v(" 之前是最佳实践，因为对于旧浏览器来说这是唯一的优化选择，此法可保证非脚本的其他一切元素能够以最快的速度得到加载和解析。")]),t._v(" "),s("p",[s("img",{attrs:{src:r(372),alt:"An image"}}),t._v("\n蓝色线代表网络读取，红色线代表执行时间，这俩都是针对脚本的；绿色线代表 HTML 解析。"),s("br"),t._v("\n此图告诉我们以下几个要点：")]),t._v(" "),s("ol",[s("li",[t._v("defer 和 async 在网络读取（下载）这块儿是一样的，都是异步的（相较于 HTML 解析）")]),t._v(" "),s("li",[t._v("它俩的差别在于脚本下载完之后何时执行，显然 defer 是最接近我们对于应用脚本加载和执行的要求的")]),t._v(" "),s("li",[t._v("关于 defer，此图未尽之处在于它是按照加载顺序执行脚本的，这一点要善加利用")]),t._v(" "),s("li",[t._v("async 则是一个乱序执行的主，反正对它来说脚本的加载和执行是紧紧挨着的，所以不管你声明的顺序如何，只要它加载完了就会立刻执行")]),t._v(" "),s("li",[t._v("仔细想想，async 对于应用脚本的用处不大，因为它完全不考虑依赖（哪怕是最低级的顺序执行），不过它对于那些可以不依赖任何脚本或不被任何脚本依赖的脚本来说却是非常合适的，最典型的例子：Google Analytics")])]),t._v(" "),s("h2",{attrs:{id:"preload与prefetch"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#preload与prefetch"}},[t._v("#")]),t._v(" preload与prefetch")]),t._v(" "),s("p",[t._v("两种预请求的区别：")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("preload")]),t._v(": 这种“资源提示” 告诉浏览器这是一种在这次导航中必须的资源，只是会在之后才会被使用， chrome甚至会在资源加载后3秒没有被使用时打印一个警告\n浏览器通常以中等优先级（非布局阻塞）获取此资源。")]),t._v(" "),s("li",[s("strong",[t._v("prefetch")]),t._v(": 这种“资源提示” 告诉浏览器这是一个在未来可能使用到的资源。浏览器通常会在空闲状态取得这些资源，在取得资源之后搁在HTTP缓存以便于实现将来的请求。")])]),t._v(" "),s("h2",{attrs:{id:"兼容性问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#兼容性问题"}},[t._v("#")]),t._v(" 兼容性问题")]),t._v(" "),s("ol",[s("li",[t._v("safari 浏览器不支持后向断言正则匹配: "),s("code",[t._v("/(?<!\\/)\\/([a-zA-Z0-9_-]*?)[?|.]/")])])])])}),[],!1,null,null,null);e.default=_.exports}}]);