(window.webpackJsonp=window.webpackJsonp||[]).push([[49],{433:function(v,_,t){"use strict";t.r(_);var a=t(41),e=Object(a.a)({},(function(){var v=this,_=v.$createElement,t=v._self._c||_;return t("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[t("h1",{attrs:{id:"v8"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#v8"}},[v._v("#")]),v._v(" V8")]),v._v(" "),t("h2",{attrs:{id:"v8的执行过程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#v8的执行过程"}},[v._v("#")]),v._v(" V8的执行过程")]),v._v(" "),t("h3",{attrs:{id:"_1-生成抽象语法树-ast-和执行上下文"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-生成抽象语法树-ast-和执行上下文"}},[v._v("#")]),v._v(" 1. 生成抽象语法树（AST）和执行上下文")]),v._v(" "),t("p",[v._v("通常，生成 AST 需要经过两个阶段:")]),v._v(" "),t("ul",[t("li",[v._v("第一阶段是分词（tokenize），又称为"),t("strong",[v._v("词法分析")]),v._v("，其作用是将一行行的源码拆解成一个个 token。所谓 token，指的是语法上不可能再分的、最小的单个字符或字符串。你可以参考下图来更好地理解什么 token。")]),v._v(" "),t("li",[v._v("第二阶段是解析（parse），又称为"),t("strong",[v._v("语法分析")]),v._v("，其作用是将上一步生成的 token 数据，根据语法规则转为 AST。如果源码符合语法规则，这一步就会顺利完成。但如果源码存在语法错误，这一步就会终止，并抛出一个“语法错误”。")])]),v._v(" "),t("h3",{attrs:{id:"_2-生成字节码"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-生成字节码"}},[v._v("#")]),v._v(" 2. 生成字节码")]),v._v(" "),t("p",[v._v("解释器 "),t("strong",[v._v("Ignition")]),v._v(" 会根据 AST 生成字节码，并解释执行字节码。")]),v._v(" "),t("p",[t("strong",[v._v("字节码")]),v._v("就是介于 AST 和机器码之间的一种代码。但是与特定类型的机器码无关，字节码需要通过解释器将其转换为机器码后才能执行。")]),v._v(" "),t("h3",{attrs:{id:"_3-执行代码"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-执行代码"}},[v._v("#")]),v._v(" 3. 执行代码")]),v._v(" "),t("p",[v._v("通常，如果有一段第一次执行的字节码，解释器 Ignition 会逐条解释执行。解释器 Ignition 除了负责生成字节码之外，它还有另外一个作用，就是解释执行字节码。在 Ignition 执行字节码的过程中，如果发现有热点代码（HotSpot），比如一段代码被重复执行多次，这种就称为"),t("strong",[v._v("热点代码")]),v._v("，那么后台的编译器 "),t("strong",[v._v("TurboFan")]),v._v(" 就会把该段热点的字节码编译为高效的机器码，然后当再次执行这段被优化的代码时，只需要执行编译后的机器码就可以了，这样就大大提升了代码的执行效率。")]),v._v(" "),t("p",[t("strong",[v._v("即时编译（JIT）")]),v._v(": 指解释器 Ignition 在解释执行字节码的同时，收集代码信息，当它发现某一部分代码变热了之后，TurboFan 编译器便闪亮登场，把热点的字节码转换为机器码，并把转换后的机器码保存起来，以备下次使用。")]),v._v(" "),t("h2",{attrs:{id:"v8的垃圾回收策略"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#v8的垃圾回收策略"}},[v._v("#")]),v._v(" V8的垃圾回收策略")]),v._v(" "),t("p",[v._v("V8的垃圾回收策略主要是基于"),t("strong",[v._v("分代式垃圾回收机制")]),v._v("，其根据对象的存活时间将内存的垃圾回收进行不同的分代，然后对不同的分代采用不同的垃圾回收算法。")]),v._v(" "),t("h3",{attrs:{id:"v8的内存结构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#v8的内存结构"}},[v._v("#")]),v._v(" V8的内存结构")]),v._v(" "),t("ul",[t("li",[t("strong",[v._v("新生代(new_space)")]),v._v(": 大多数的对象开始都会被分配在这里，这个区域相对较小但是垃圾回收特别频繁，该区域被分为两半，一半用来分配内存，另一半用于在垃圾回收时将需要保留的对象复制过来。")]),v._v(" "),t("li",[t("strong",[v._v("老生代(old_space)")]),v._v(": 新生代中的对象在存活一段时间后就会被转移到老生代内存区，相对于新生代该内存区域的垃圾回收频率较低。老生代又分为老生代指针区和老生代数据区，前者包含大多数可能存在指向其他对象的指针的对象，后者只保存原始数据对象，这些对象没有指向其他对象的指针。")]),v._v(" "),t("li",[t("strong",[v._v("大对象区(large_object_space)")]),v._v(": 存放体积超越其他区域大小的对象，每个对象都会有自己的内存，垃圾回收不会移动大对象区。")]),v._v(" "),t("li",[t("strong",[v._v("代码区(code_space)")]),v._v(": 代码对象，会被分配在这里，唯一拥有执行权限的内存区域。")]),v._v(" "),t("li",[t("strong",[v._v("map区(map_space)")]),v._v(": 存放Cell和Map，每个区域都是存放相同大小的元素，结构简单")])]),v._v(" "),t("h3",{attrs:{id:"新生代"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#新生代"}},[v._v("#")]),v._v(" 新生代")]),v._v(" "),t("p",[v._v("在V8引擎的内存结构中，新生代主要用于存放存活时间较短的对象。新生代内存是由两个semispace(半空间)构成的，内存最大值在64位系统和32位系统上分别为32MB和16MB，\n在新生代的垃圾回收过程中主要采用了Scavenge算法。")]),v._v(" "),t("p",[v._v("Scavenge算法是一种典型的牺牲空间换取时间的算法。在Scavenge算法的具体实现中，主要采用了Cheney算法，它将新生代内存一分为二，每一个部分的空间称为semispace，\n其中处于激活状态的区域我们称为From空间，未激活(inactive new space)的区域我们称为To空间。\n这两个空间中，始终只有一个处于使用状态，另一个处于闲置状态。我们的程序中声明的对象首先会被分配到From空间，当进行垃圾回收时，如果From空间中尚有存活对象，\n则会被复制到To空间进行保存，非存活的对象会被自动回收。当复制完成后，From空间和To空间完成一次角色互换，To空间会变为新的From空间，原来的From空间则变为To空间。")]),v._v(" "),t("h3",{attrs:{id:"对象晋升"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#对象晋升"}},[v._v("#")]),v._v(" 对象晋升")]),v._v(" "),t("p",[v._v("当一个对象在经过多次复制之后依旧存活，那么它会被认为是一个生命周期较长的对象，在下一次进行垃圾回收时，该对象会被直接转移到老生代中，这种对象从新生代转移到老生代的过程我们称之为晋升。")]),v._v(" "),t("p",[v._v("对象晋升的条件主要有以下两个：")]),v._v(" "),t("ul",[t("li",[v._v("对象是否经历过一次Scavenge算法")]),v._v(" "),t("li",[v._v("To空间的内存占比是否已经超过25%")])]),v._v(" "),t("h3",{attrs:{id:"老生代"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#老生代"}},[v._v("#")]),v._v(" 老生代")]),v._v(" "),t("p",[v._v("在老生代中，采用新的算法"),t("code",[v._v("Mark-Sweep(标记清除)")]),v._v("和"),t("code",[v._v("Mark-Compact(标记整理)")]),v._v("来进行管理。")]),v._v(" "),t("p",[t("code",[v._v("Mark-Sweep")]),v._v("算法主要是通过判断某个对象是否可以被访问到，从而知道该对象是否应该被回收，具体步骤如下：")]),v._v(" "),t("ul",[t("li",[v._v("垃圾回收器会在内部构建一个根列表，用于从根节点出发去寻找那些可以被访问到的变量。比如在JavaScript中，window全局对象可以看成一个根节点。")]),v._v(" "),t("li",[v._v("然后，垃圾回收器从所有根节点出发，遍历其可以访问到的子节点，并将其标记为活动的，根节点不能到达的地方即为非活动的，将会被视为垃圾。")]),v._v(" "),t("li",[v._v("最后，垃圾回收器将会释放所有非活动的内存块，并将其归还给操作系统。")])]),v._v(" "),t("p",[v._v("但是Mark-Sweep算法存在一个问题，就是在经历过一次标记清除后，内存空间可能会出现不连续的状态，因为我们所清理的对象的内存地址可能不是连续的，\n所以就会出现内存碎片的问题，导致后面如果需要分配一个大对象而空闲内存不足以分配，就会提前触发垃圾回收，而这次垃圾回收其实是没必要的，\n因为我们确实有很多空闲内存，只不过是不连续的。")]),v._v(" "),t("p",[v._v("为了解决这种内存碎片的问题，"),t("code",[v._v("Mark-Compact(标记整理)")]),v._v("算法被提了出来，该算法主要就是用来解决内存的碎片化问题的，回收过程中将死亡对象清除后，\n在整理的过程中，会将活动的对象往堆内存的一端进行移动，移动完成后再清理掉边界外的全部内存，")]),v._v(" "),t("p",[v._v("由于JS的单线程机制，垃圾回收的过程会阻碍主线程同步任务的执行，待执行完垃圾回收后才会再次恢复执行主任务的逻辑，这种行为被称为"),t("strong",[v._v("全停顿(stop-the-world)")]),v._v("。\n为了减少垃圾回收带来的停顿时间，V8引擎又引入了"),t("code",[v._v("Incremental Marking(增量标记)")]),v._v("的概念，即将原本需要一次性遍历堆内存的操作改为增量标记的方式，\n先标记堆内存中的一部分对象，然后暂停，将执行权重新交给JS主线程，待主线程任务执行完毕后再从原来暂停标记的地方继续标记，直到标记完整个堆内存。\n这个理念其实有点像React框架中的Fiber架构，只有在浏览器的空闲时间才会去遍历Fiber Tree执行对应的任务，否则延迟执行，尽可能少地影响主线程的任务，避免应用卡顿，提升应用性能。")]),v._v(" "),t("p",[v._v("得益于增量标记的好处，V8引擎后续继续引入了"),t("code",[v._v("延迟清理(lazy sweeping)")]),v._v("和"),t("code",[v._v("增量式整理(incremental compaction)")]),v._v("，让清理和整理的过程也变成增量式的。\n同时为了充分利用多核CPU的性能，也将引入并行标记和并行清理，进一步地减少垃圾回收对主线程的影响，为应用提升更多的性能。")]),v._v(" "),t("div",{staticClass:"custom-block warning"},[t("p",{staticClass:"custom-block-title"},[v._v("为什么不用引用计数法？")]),v._v(" "),t("p",[v._v("引用计数法无法回收循环引用的对象，导致内存泄漏。")])]),v._v(" "),t("h3",{attrs:{id:"如何避免内存泄漏"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#如何避免内存泄漏"}},[v._v("#")]),v._v(" 如何避免内存泄漏")]),v._v(" "),t("ol",[t("li",[v._v("尽可能少地创建全局变量")]),v._v(" "),t("li",[v._v("手动清除定时器")]),v._v(" "),t("li",[v._v("少用闭包")]),v._v(" "),t("li",[v._v("清除DOM引用")]),v._v(" "),t("li",[v._v("使用弱引用")])]),v._v(" "),t("h3",{attrs:{id:"参考"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[v._v("#")]),v._v(" 参考")]),v._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://juejin.cn/post/6844904016325902344",target:"_blank",rel:"noopener noreferrer"}},[v._v("一文搞懂V8引擎的垃圾回收"),t("OutboundLink")],1)]),v._v(" "),t("li")])])}),[],!1,null,null,null);_.default=e.exports}}]);